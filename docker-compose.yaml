version: "3.7"

services:
  api:
    build: .
    container_name: api
    platform: linux/amd64
    depends_on:
      - postgres
      - kafka
      - kafka-ui
    environment:
      ENV: run
      POSTGRES_URI: ${POSTGRES_URI}
      KAFKA_URI: ${KAFKA_URI}
      TOPIC: ${TOPIC}
      FLASK_DEBUG: 1
      PYTHONPATH: ${PYTHONPATH}

    ports:
      - "3000:3000"
    volumes:
      - ./:/usr/src/app
      - ./:/usr/src/app/.venv
    networks:
      - python_ddd

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: mydb
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - python_ddd

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - python_ddd

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" # Docker 내부 네트워크에서 사용 (kafka:9092)
      - "29092:29092" # 외부에서 접근할 때 사용 (localhost:29092)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - python_ddd

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - python_ddd

volumes:
  api_modules:
    driver: local

networks:
  python_ddd:
    name: python_ddd
